AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  AppName:
    Type: String
    Default: campus-app
  Stage:
    Type: String
    Default: dev
  TableName: 
    Type: String
    Default: campus-l3-dev-app-benjamin-table-device-dev

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Cors:
        AllowMethods: "'POST, GET, OPTIONS, PUT'"
        AllowHeaders: "'Accept, Content-Type, Content-Length, Authorization, X-Api-Key'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Name:
        Fn::Sub: ${AppName}-api-${Stage}
      StageName: !Ref Stage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: specification/donne_api.yml

  GetDevices:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-get-devices-${Stage}
      Description: Get the list of devices
      CodeUri: ./src
      Handler: api_find.get_devices
      Policies:
        Version: "2012-10-17"
        Statement: 
          Sid: "ReadWriteTable"
          Effect: "Allow"
          Action: 
          - dynamodb:GetItem
          - dyanmodb:Scan
          - dynamodb:Query
          Resource: 
            Fn::Sub: "arn:aws:dynamodb:*:*:table/${TableName}"
      Environment:
        Variables:
          DEVICE_TABLE:
            Fn::Sub: ${TableName}
  AddDevice:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-add-device-${Stage}
      Description: Add device
      CodeUri: ./src
      Handler: api_find.add_device
      Role:
        Fn::Sub: ${DBrole.Arn}
      Environment:
        Variables:
          DEVICE_TABLE:
            Fn::Sub: ${TableName}
  DeviceTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
      -
        AttributeName: "DeviceId"
        AttributeType: "S"
      -
        AttributeName: "DeviceName"
        AttributeType: "S"
      -
        AttributeName: "DeviceType"
        AttributeType: "S"
      KeySchema:
      -
        AttributeName: "DeviceId"
        KeyType: "HASH"
      -
        AttributeName: "DeviceName"
        KeyType: "RANGE"

      ProvisionedThroughput: 
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "10"
      TableName:
        Fn::Sub: "${TableName}"
      GlobalSecondaryIndexes:
      -
        IndexName: "DeviceType"
        KeySchema: 
        -
          AttributeName: "DeviceType"
          KeyType: "HASH"    
        Projection: 
          ProjectionType: "ALL"
        ProvisionedThroughput: 
          ReadCapacityUnits: "10"
          WriteCapacityUnits: "10"
          
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${Stage}/${AppName}/serviceRoles/
      RoleName:
        Fn::Sub: ${AppName}-api-execution-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Sub: ${AppName}-api-execution-role-policy-${Stage}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${GetDevices.Arn}
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  Fn::Sub: ${add_device.Arn]"
  DBRole:
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${Stage}/${AppName}/serviceRoles/
      RoleName:
        Fn::Sub: ${AppName}-db-interactions-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Sub: ${AppName}-db-interactions-role-policy-dynamo-${Stage}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  Fn::Sub: ${devicesTable.Arn}

